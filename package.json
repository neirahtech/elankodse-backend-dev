{
  "name": "elankodse-backend",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "prod": "NODE_ENV=production node server.js",
    "build": "echo 'No build step required for Node.js'",
    "backup": "node scripts/backup.js",
    "sync": "node scripts/sync-blogger.js",
    "migrate-images": "node scripts/production-migrate-images.js",
    "migrate-images-batch": "node scripts/production-migrate-images.js 10 0",
    "migrate-images-small": "node scripts/production-migrate-images.js 5 0",
    "migrate-images-large": "node scripts/production-migrate-images.js 20 0",
    "migrate-images-server": "node scripts/server-migrate-images.js",
    "migrate-images-remote": "node scripts/remote-migrate-images.js",
    "migrate-images-database": "node scripts/database-migrate-images.js",
    "migrate-images-simple": "node scripts/simple-blogger-migration.js",
    "migrate-images-all": "node scripts/migrate-all-posts.js",
    "update-post-covers": "node scripts/update-post-cover-images.js",
    "download-remaining-images": "node scripts/download-remaining-images.js",
    "fix-image-urls": "node scripts/fix-image-urls.js",
    "replace-blogger-urls": "node scripts/replace-blogger-urls.js",
    "generate-slugs": "node scripts/generate-slugs.js",
    "migrate-images-batch-10": "node scripts/simple-blogger-migration.js 10",
    "migrate-images-batch-20": "node scripts/simple-blogger-migration.js 20",
    "migrate-images-batch-50": "node scripts/simple-blogger-migration.js 50",
    "migrate-images-batch-100": "node scripts/simple-blogger-migration.js 100",
    "create-image-blobs-table": "node scripts/create-image-blobs-table.js",
    "test-blogger-api": "node test-blogger-api.js",
    "test-migration-setup": "node scripts/test-migration-setup.js",
    "check-migration": "node -e \"const Post = require('./models/Post.js'); const { Op } = require('sequelize'); const { sequelize } = require('./config/db.js'); (async () => { await sequelize.authenticate(); const external = await Post.count({ where: { [Op.or]: [{ coverImage: { [Op.like]: '%blogger.googleusercontent.com%' } }, { content: { [Op.like]: '%blogger.googleusercontent.com%' } }] } }); const local = await Post.count({ where: { coverImage: { [Op.like]: '/uploads/%' } } }); console.log(`External images: ${external}, Local images: ${local}`); process.exit(0); })();\"",
    "backup-db": "mysqldump -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE > backup_$(date +%Y%m%d_%H%M%S).sql",
    "test-upload": "node -e \"const fs = require('fs'); const path = require('path'); const dir = path.join(process.cwd(), 'uploads', 'images'); if (!fs.existsSync(dir)) { fs.mkdirSync(dir, { recursive: true }); } const test = path.join(dir, 'test.txt'); fs.writeFileSync(test, 'test'); fs.unlinkSync(test); console.log('âœ… Upload directory works!');\"",
    "clean-images": "node -e \"const fs = require('fs'); const path = require('path'); const dir = path.join(process.cwd(), 'uploads', 'images'); if (fs.existsSync(dir)) { const files = fs.readdirSync(dir).filter(f => f.startsWith('test_')); files.forEach(f => fs.unlinkSync(path.join(dir, f))); console.log(`Cleaned ${files.length} test files`); }\"",
    "deploy:prod": "NODE_ENV=production npm start"
  },
  "dependencies": {
    "axios": "^1.11.0",
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^17.0.1",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.1",
    "express-validator": "^7.2.1",
    "form-data": "^4.0.4",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.16.0",
    "multer": "^1.4.5-lts.1",
    "mysql2": "^3.6.5",
    "nodemailer": "^7.0.5",
    "sequelize": "^6.35.2",
    "sharp": "^0.34.3"
  },
  "devDependencies": {
    "nodemon": "^3.0.3"
  }
}
